* observer pattern

  decouple pattern 的一种类型, 将事件触发和事件handler 分离. 这样, 在事件触发时, 可以同时trigger
  多个handler执行.

  什么是事件? 听起来好像挺科技, 挺黑盒, 其实就是引起对象内部状态改变的动作, 这个动作触发时, 意味着对象内部
  状态改变, 此时, 想把这个好消息告诉所有关注这件事的小观众, 当然这里的观众也许并不是一个. 考虑到观众老爷们
  可能随时加入, 随时撤出, 事件发布者要实现这个添加, 删除观众的操作. 

  这里, 如果是多线程环境下呢? 正在发布过程中, 执行了添加或者删除操作?, 我想在发布环节里, 可能会加锁.

  这种模式, 书里和业界一般称为observer pattern, 观察者模式, 我想不太合适, 观察者都是自己发现状态改变,
  自己做出反应, 这显然是和模式的套路不同, 个人觉得应该叫Listener pattern, 只是个听信儿的主儿, 自己
  对喜欢的事件关注下, 当事件触发时, 发布者会通知你.自己决定如何handle

  异步编程是不是也是这样实现的?

  iOS dispatchQueue.async.do{}, 具体的签名忘了, 不过大概也是传入一个匿名函数, 当这个函数执行完了,
  返回给你一个结果, 你无需等待, 和本模式的 register --- listen 是一个套路啊.

** 实现
   
  写到这里, 似乎实现已经很清晰了, 抽象出两个类型, 一个事件发布者, 持有所有listener 的列表, 并提供添加
  删除的操作.另一个类型就是Listener, 对自己关心的事件在对应的发布者上注册, 告诉他, 等这个事件触发时,
  告知我~~, 然后Listener 本地实现一个handle 过程.

** 后记

   observer pattern 是golang design pattern 这本书里最后一个pattern
   
   实现方法都是抽象和数据组合, 或者简单点, 就一个词, 抽象, 既可以遮羞, 又能提炼出概念, 让人们不必拘泥于
   0 和 1 的繁杂. 信息沟通采用interface, 解耦具体实现. 另外一些模式似乎更偏向于逻辑, 比如strategy.
   也有将任务分离出去, 比如visitor, 插入visitor, 并执行其携带的预设接口方法, 又比如本文里的observer
   模式, 将事件触发和事件handler解耦, 分离出两个对象, publisher & listener(observer) 

   几个方面的考量: 
   - readable 70%
   - maintainable 100%
   - efficient(performance) ??

   最最最后, 模式虽好, 可不要贪杯哦, 不要over engineering
